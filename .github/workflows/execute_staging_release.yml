name: Merge main to release & Draft release note

on:
  push:
    branches: [ main ]
  repository_dispatch:
    types: [release_preparation]

jobs:
  main_to_release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: release
          fetch-depth: 0

      - name: Create title
        id: create-title
        run: |
          TITLE=RELEASE`TZ=UTC-9 date +%Y%m%d`
          echo "title=$TITLE" >> $GITHUB_OUTPUT

      - name: Create PullRequest
        id: create-pr
        run: |
          PR=`gh pr create --base release --head main --title "${{ steps.create-title.outputs.title }}" --body '' --reviewer ${{ github.event.sender.login }}`
          echo "pr=$PR" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge PullRequest
        run: |
          gh pr merge main --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Edit PullRequest
        run: |
          BODY=`git log --merges --reverse --format='%s' release..origin/main | grep 'Merge pull request #' | sed -e 's/Merge pull request/-/g' | awk '{ sub(" from.*$",""); print $0; }'`
          gh pr edit ${{ steps.create-pr.outputs.pr }} --body "$BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: danger
          SLACK_MESSAGE: 'Failed to main_to_release'
          SLACK_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_SUCCESS }}

  draft_release_note:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: main_to_release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Analyticsは基本水曜リリースなので、次の水曜日を取得する
      - name: Create next wednesday
        id: create-next-wednesday
        run: |
          D=$(( 3-$(TZ=UTC-9 date +%w) ))
          if [ $D -lt 0 ]
          then
              D=$((7+$D))
          fi
          NEXT_WEDNESDAY=`TZ=UTC-9 date -d "$D days" +%Y%m%d`
          echo "next_wednesday=$NEXT_WEDNESDAY" >> $GITHUB_OUTPUT

      # 同じ日付でドラフトのリリースノートがある場合は削除する
      - name: Delete note
        run: |
          gh release list | grep -e ${{ steps.create-next-wednesday.outputs.next_wednesday }} | grep -e Draft | head -c 12 | xargs gh release delete || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create previous tag
        id: create-previous-tag
        run: |
          TAG=$(git tag | tail -1)
          echo "previous_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create tag
        id: create-tag
        run: |
          TAG=v$(git tag | grep -e ${{ steps.create-next-wednesday.outputs.next_wednesday }} | cat - <(echo "${{ steps.create-next-wednesday.outputs.next_wednesday }}_00") | sort | tail -1 | awk -F "_" "{cnt=\$2+1}{printf \"%s_%02d\", \$1, cnt}")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Draft release note
        run: |
          gh release create ${{ steps.create-tag.outputs.tag }} --draft --target release --title ${{ steps.create-tag.outputs.tag }} --generate-notes --notes-start-tag ${{ steps.create-previous-tag.outputs.previous_tag }}
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: danger
          SLACK_MESSAGE: 'Failed to draft_release_note'
          SLACK_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_SUCCESS }}
